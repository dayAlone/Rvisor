<?php

namespace Proxies\__CG__\IAgent\NewOrderBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Customer extends \IAgent\NewOrderBundle\Entity\Customer implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getCode()
    {
        if ($this->__isInitialized__ === false) {
            return $this->_identifier["code"];
        }
        $this->__load();
        return parent::getCode();
    }

    public function setDeleted($deleted)
    {
        $this->__load();
        return parent::setDeleted($deleted);
    }

    public function getDeleted()
    {
        $this->__load();
        return parent::getDeleted();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setAddress($address)
    {
        $this->__load();
        return parent::setAddress($address);
    }

    public function getAddress()
    {
        $this->__load();
        return parent::getAddress();
    }

    public function setPhone($phone)
    {
        $this->__load();
        return parent::setPhone($phone);
    }

    public function getPhone()
    {
        $this->__load();
        return parent::getPhone();
    }

    public function setComment($comment)
    {
        $this->__load();
        return parent::setComment($comment);
    }

    public function getComment()
    {
        $this->__load();
        return parent::getComment();
    }

    public function setCurrentDebt($currentDebt)
    {
        $this->__load();
        return parent::setCurrentDebt($currentDebt);
    }

    public function getCurrentDebt()
    {
        $this->__load();
        return parent::getCurrentDebt();
    }

    public function setLastUpdate($lastUpdate)
    {
        $this->__load();
        return parent::setLastUpdate($lastUpdate);
    }

    public function getLastUpdate()
    {
        $this->__load();
        return parent::getLastUpdate();
    }

    public function setMaximumDebt($maximumDebt)
    {
        $this->__load();
        return parent::setMaximumDebt($maximumDebt);
    }

    public function getMaximumDebt()
    {
        $this->__load();
        return parent::getMaximumDebt();
    }

    public function setGeolocationFk(\IAgent\NewOrderBundle\Entity\CustomerGeolocation $geolocationFk = NULL)
    {
        $this->__load();
        return parent::setGeolocationFk($geolocationFk);
    }

    public function getGeolocationFk()
    {
        $this->__load();
        return parent::getGeolocationFk();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'code', 'deleted', 'name', 'address', 'phone', 'comment', 'currentDebt', 'lastUpdate', 'maximumDebt', 'geolocationFk');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}